\section{The Reasoning Framework}
\label{sec:reasoning}

% \begin{figure}
% \centering
% \begin{tabular}{l|l}
% \begin{txnimpcode}
% $\begin{decoration}
%   \{X = k\}
% \end{decoration}$
%   atomic {
%     v1 := 0; v2 := 1;
%     while(v1<X) {
%       v2 := v2 * (X-v1);
%       v1 := v1+1;
%     }
%     X := v2; Y := v2;
%   }
% $\begin{decoration}
%   \{X = k! \conj Y = X\}
% \end{decoration}$
% \end{txnimpcode}
% &
% \begin{txnimpcode}
% $\begin{decoration}
%   \{X = k\}
% \end{decoration}$
%   transaction {
%     v1 := 0; v2 := 1;
%     while(v1<X) {
%       v2 := v2 * (X-v1);
%       v2 := v2 * v1;
%       v1 := v1+1;
%     }
%     X := v2; Y := v2;
%   }
% $\begin{decoration}
%   \{Y = X\}
% \end{decoration}$
% \end{txnimpcode}
% \end{tabular}
%   \caption{Factorial program written as an atomic block and a weakly
%   isolated transaction (shared variables have uppercase names).
%   Effect of multiple iterations of the \C{atomic} loop can be
%   summarized as $k!$, while same cannot be done with the
%   \C{transaction} loop, where weak isolation allows reads in different
%   iterations to return different values for $X$.  Nonetheless,
%   post-state satisfies $X=Y$ in both cases due to atomicity of
%   writes.}
% \label{fig:atomic-vs-transaction}
% \end{figure}

We now describe a proof system that lets us prove the correctness of a
\txnimp program $c$ w.r.t its high-level consistency conditions $I$,
on an implementation that satisfies the isolation specifications
($\I$) of its transactions\footnote{Note the difference between $I$
  and $\I$. The former constitute \emph{proof} \emph{obligations} for
  the programmer, whereas the latter describes a transaction's
  \emph{assumptions} about the operational characteristics of the
  underlying system.}.  Our proof system is essentially an adaptation
of a rely-guarantee reasoning framework~\cite{rgjones} to the setting of
weakly isolated database transactions.  The primary challenge in the
formulation deals with how we relate a transaction's isolation
specification ($\I$) to its rely relation ($R$) that describes the
transaction's environment, so that interference is considered only
insofar as allowed by the isolation level.  Another characteristic of
the transaction setting that affects the structure of the proof system
is atomicity; a transaction's writes are not visible to its peers
until it commits.  In the context of rely-guarantee, this means that
the transaction's guarantee ($G$) should capture the aggregate effect
of a transaction, and not its individual writes.  While shared memory
\C{atomic} blocks also have the same characteristic, the fact that
transactions are weakly isolated introduces surprising complexity.  Unlike an
\C{atomic} block, the effect of a transaction is \emph{not} a
sequential composition of the effects of its statements because each
statement can witness a potentially different version of the state.

\subsection{The Rely-Guarantee Judgment}
\label{sec:rely-guarantee}

\input{rg-rules}

Fig.~\ref{fig:rg-rules} shows an illustrative subset of the
rely-guarantee (RG) reasoning rules for $\txnimp$. We define two RG
judgments: top-level ($\rg{I,R}c{G,I}$), and transaction-local ($\R
\vdash \hoare{P}c{Q}$).  Recall that the standard RG judgment is the
quintuple $\rg{P,R}{c}{G,Q}$. Instead of a separate $P$ and $Q$, our
top-level judgment uses $I$ for both pre- and post-conditions, because
our focus is on verifying that a \txnimp\ program \emph{preserves} a
databases' consistency conditions\footnote{The terms \emph{consistency
    condition}, \emph{high-level invariant}, and \emph{integrity
    constraint} are used interchangeably throughout the paper.}.  A
transaction-local RG judgment does not include a guarantee relation
because transaction-local effects are not visible outside a
transaction. Also, the rely relation ($\R$) of the transaction-local
judgment is not the same as the top-level rely relation ($R$) because
it must take into account the transaction's isolation specification
($\I$). Intuitively, $\R$ is $R$ modulo $\I$.  Recall that a
transaction writes to its local database ($\stl$), which is then
flushed when the transaction commits. Thus, the guarantee of a
transaction depends on the state of its local database at the commit
point. The pre- and post-condition assertions ($P$ and $Q$) in the
local judgment facilitate tracking the changes to the
transaction-local state, which eventually helps us prove the validity
of the transaction's guarantee.  Both $P$ and $Q$ are bi-state
assertions; they relate transaction-local database state ($\stl$) to
the global database state ($\stg$). Thus, the transaction-local
judgment effectively tracks how transaction-local and global states
change in relation to each other.

A central feature of a rely-guarantee judgment is a stability
condition that requires the validity of an assertion $\phi$ to be
unaffected by the interference, i.e., the rely relation $R$. In
conventional RG, stability is defined as follows, where $\sigma$ denotes a
state:
\begin{smathpar}
\begin{array}{lcl}
\stable(R,\phi) & \Leftrightarrow & \forall \sigma,\sigma'.~
\phi(\sigma) \conj R(\sigma,\sigma') \Rightarrow \phi(\sigma')\\
\end{array}
\end{smathpar}
Due to the presence of local and global database states, and the
availability of an isolation specification, we use multiple
definitions of stability in Fig.~\ref{fig:rg-rules}, but they all
convey the same intuition as above. In our setting, we only need to prove the stability of an assertion ($Q$) against those environment steps which lead to a global database state on which the transaction itself can take its next step according to its isolation specification ($\I$). 

\begin{smathpar}
\begin{array}{lcl}
\stable(R, Q) & \Leftrightarrow & \forall \stl, \stg, \stg'. Q(\stl, \stg) \wedge R^{*}(\stg, \stg') \wedge \I(\stl, \stg, \stg') \Rightarrow Q(\stl, \stg')
\end{array}
\end{smathpar}

The above condition uses the transitive closure of $R$, while the standard RG stability assertion only uses $R$ and then relies on an inductive argument to prove stability for the transitive closure. We cannot directly replace $R^{*}$ by $R$ in the above condition because the inductive argument would not hold, as $R^{*}$ modulo $\I$ is not the same as ($R$ modulo $\I$$)^{*}$.To obtain an equivalent form in our setting, we require an additional condition on the isolation specification, which we call the stability condition on $\I$. 
The condition requires $\I$ to allow
an interference $R^{*}(\stg,\stg'')$, for two database states $\stg$
and $\stg''$, only if it also allows interference for every prefix of
$R^{*}(\stg,\stg'')$. In other words, if $\I$ disallows interference
from $\stg$ to $\stg'$, then an $R$-step from $\stg'$ to $\stg''$
should not make the interference from $\stg$ to $\stg''$ valid.  This
stability condition on $\I$ is defined formally thus:
\begin{smathpar}
\begin{array}{lcl}
  \stable(R,\I) & \Leftrightarrow & \forall \stl,\stg,\stg',\stg''.~
  \neg\I(\stl,\stg,\stg') \conj R(\stg',\stg'') \Rightarrow
  \neg\I(\stl,\stg,\stg'')
\end{array}
\end{smathpar}
It can be easily verified that the above stability condition is
satisfied by the isolation axioms from Sec.~\ref{sec:isolation}. For
instance, $\I_{ss}$, the snapshot axiom, is stable because if
$\I_{ss}$ is invalid ($\neg\I_{ss}$), then an interference has already
modified a record, and no further interference will restore the
original record, because the original record bears the id of a
transaction that has already committed. We can now generalize the stability condition for any arbitrary assertion $Q$ by only considering those environment steps which in addition to preserving $Q$, also preserve the condition that the transaction can continue to take its next step, i.e. the condition $\I$ holds on both the beginning and the end states. 

 \begin{smathpar}
\forall \stl, \stg, \stg', \stg_1. Q(\stl, \stg) \wedge \I(\stl, \stg_1, \stg) \wedge R^{*}(\stg, \stg') \wedge \I(\stl, \stg_1, \stg') \Rightarrow Q(\stl, \stg')
\end{smathpar}

The stability of $\I$ ensures that we need only consider those environment steps which preserve the condition $\I$. We can now replace the transitive closure in the above condition with the single step relation $R$, backed by the inductive argument for stability. Pushing the universal quantifier for $\stg_1$ inside the antecedent and separating the predicates involving $\stg_1$, we can rewrite the condition in the form below, by defining a new ternary relation $\R$, which can be thought of as $R$ modulo $\I$:%stating that an assertion $Q$ on a database state $\stg$ on which the transaction can take its next step (hence the condition $\I(\stl, \stg_1, \stg)$) is stable w.r.t. environment steps to $\stg'$ 

\begin{smathpar}
\begin{array}{lcl}
\stable(\R, Q) & \Leftrightarrow & \forall \stl,\stg,\stg'. Q(\stl,\stg) \wedge \R(\stl,\stg,\stg') \Rightarrow Q(\stl,\stg')\\
\R(\stl, \stg, \stg') & \Leftrightarrow & \exists \stg_1. R(\stg, \stg') \wedge \I(\stl, \stg_1, \stg) \wedge \I(\stl, \stg_1, \stg')
\end{array}
\end{smathpar}

The above condition often significantly simplifies the form of $\R$ irrespective
of $R$. For example, when a transaction is executed against a
snapshot of the database (i.e. $\mathbb{I}_{ss}$), $\R$ will be the
identity function, since if $\stg \neq \stg'$, there does not exist
any $\stg_1$ which satisfies the constraint for
$\R_l(\stl,\stg,\stg')$.

\rulelabel{RG-Txn} is the top-level rule that lets us prove a
transaction preserves the high-level invariant $I$ when executed under
the required isolation as specified by $\I$. It depends on a
transaction-local judgment to verify the body ($c$) of a transaction with
id $i$. The precondition $P$ of $c$ must follow from the fact that the
transaction-local database ($\stl$) is initially empty, and the global
database satisfies the high-level invariant $I$. The rely relation
($\R_e$) is obtained from the global rely relation $R$ and the isolation specification $\I_e$ as explained above. Note that $\I_e$ constrains the global effects visible to the transaction while it is executing but has not yet committed. 

%for the local judgment is a ternary relation computed as $R$
%modulo $\I_e$:
%\begin{smathpar}
%\begin{array}{lcl}
%\R_e(\stl,\stg,\stg') & \Leftrightarrow & R(\stg,\stg') \conj
%\I_e(\stl,\stg,\stg')
%  \R_e(\stl,\stg,\stg') & \Leftrightarrow & \exists \stg_1.  R(\stg, \stg') \wedge \I_e(\stl, \stg_1, \stg) \wedge \I_e(\stl, \stg_1, \stg')
%\end{array}
%\end{smathpar}
%\noindent While $R$ describes changes in the global database state, $\I_e$
%constrains the global effects visible to the transaction.
%Recall however that $\I_e$ uses the global state in effect at the
%point the transaction last took a step ($\stg_1$) to determine whether
%the transaction can proceed from the current global state ($\stg$).
%Moreover, the global rely relation $R$ defines the permissible
%interferences from $\Delta$ to a future global state ($\Delta'$).  The
%local rely relation $\R_e$ determines allowed interferences as
%specified by $\I_e$ assuming $\stg_1$.  In effect, the existential on
%$\stg_1$ defines this rely relation to be an over-approximation on
%the interferences in the presence of which the transaction can
%proceed, simplifying verification burden.


%In words, if there exists $\stg_1$ which was the global database state during the last step by a transaction and if the transaction can take its next step at the current global database state $\stg$, then even after the interference, the transaction should still be able to take its next step. 


%\begin{smathpar}
%\exists \stg_1. \I_e(\stl, \stg_1, \stg) \wedge R(\stg, \stg') \wedge \I_e(\stl, \stg_1, \stg') \Rightarrow \forall \stg_2 
%\end{smathpar}
%Thus, $\R_l$ allows an interference only if it does not violate the
%execution-time isolation specification ($\I_e$) of the transaction. If a
%certain interference violates the isolation spec, i.e., $R(\stg,\stg')
%\Rightarrow \neg(\I_e(\stl,\stg,\stg'))$, then $\R_l(\stl,\stg,\stg')
%\Leftrightarrow false$, and any assertion is trivially stable w.r.t
%that interference. This is sensible considering such interference is
%prevented in the operational semantics. 

Recall that $P$ and $Q$ of the transaction-local RG judgment are
binary assertions; they relate local and global database states. The
local judgment rules require one or both of them to be stable with respect to the constrained rely relation $\R_e$. 

%The
%stability of a binary assertion $Q$ w.r.t a ternary rely relation $\R$
%is defined as:
%\begin{smathpar}
%\begin{array}{c}
%\forall \stl,\stg,\stg'.~ Q(\stl,\stg) \conj \R(\stl,\stg,\stg')
%\Rightarrow Q(\stl,\stg')
%\end{array}
%\end{smathpar}
%That is, if $Q$ relates $\stl$ to $\stg$, and an interference allowed
%by the isolation specification (which implicitly considers the local
%state $\stl$) takes $\stg$ to $\stg'$, then $Q$ must also relate $\stl$
%to $\stg'$.

For the guarantee $G$ of a transaction to be valid, it must follow
from the post-condition $Q$ of the body, provided that $Q$ is stable
w.r.t the commit-time interference captured by $\R_c$. $\R_c$, like
$\R_e$, is computed as a rely relation modulo isolation, except that
commit-time isolation ($\I_c$) is considered. The validity of
$G$ is captured by the following implication:
\begin{smathpar}
\begin{array}{c}
  \forall \stl,\stg.~ Q(\stl,\stg) \Rightarrow G(\stg, \stl \gg \stg)\spc
\end{array}
\end{smathpar}
In other words, if $Q$ relates the transaction-local database state
($\stl$) to the state of the global database ($\stg$) before a transaction
commits, then $G$ must relate the states of the global database before
and after the commit. The act of commit is captured by the flush
operation ($\stl\gg\stg$). Once we establish the validity of $G$ as a
faithful representative of the transaction, we can verify that the
transaction preserves the high-level invariant $I$ by checking the
stability of $I$ w.r.t $G$, i.e., $\forall \stg,\stg'.~I(\stg) \wedge
G(\stg,\stg') \Rightarrow I(\stg')$.

%A characteristic of RG reasoning is that stability of an assertion is
%always proven w.r.t to $R$, and not $R^{*}$, although interference may
%include multiple environment steps, and $R$ only captures a single
%step. This is nonetheless sound due to inductive reasoning: if
%$Q$ is preserved by every step of $R$, then $Q$ is preserved by
%$R^{*}$, and vice-versa.  However, such reasoning does not extend
%naturally to isolation-constrained interference because $R^{*}$ modulo
%$\I$ is not same as $\R^{*}$; the former is a transitive relation
%constrained by $\I$, whereas the latter is the transitive closure of an
%$\I$-constrained relation. We therefore introduce a side-condition on
%$\I$ that restores the equality. The condition requires $\I$ to allow
%an interference $R^{*}(\stg,\stg'')$, for two database states $\stg$
%and $\stg''$, only if it also allows interference for every prefix of
%$R^{*}(\stg,\stg'')$. In other words, if $\I$ disallows interference
%from $\stg$ to $\stg'$, then an $R$-step from $\stg'$ to $\stg''$
%should not make the interference from $\stg$ to $\stg''$ valid.  This
%stability condition on $\I$ is defined formally thus:
%\begin{smathpar}
%\begin{array}{lcl}
%  \stable(R,\I) & \Leftrightarrow & \forall \stl,\stg,\stg',\stg''.~
%  \neg\I(\stl,\stg,\stg') \conj R(\stg',\stg'') \Rightarrow
%  \neg\I(\stl,\stg,\stg'')
%\end{array}
%\end{smathpar}
%It can be easily verified that the above stability condition is
%satisfied by the isolation axioms from Sec.~\ref{sec:isolation}. For
%instance, $\I_{ss}$, the snapshot axiom, is stable because if
%$\I_{ss}$ is invalid ($\neg\I_{ss}$), then an interference has already
%modified a record, and no further interference will restore the
%original record, because the original record bears the id of a
%transaction that has already committed. 

The \rulelabel{RG-Conseq} rule lets us safely weaken the guarantee
$G$, and strengthen the rely $R$ of a transaction. Importantly, it
also allows its isolation specification $\I$ to be strengthened (both
$\I_e$ and $\I_c$). This means that a transaction proven correct under
a weaker isolation level is also correct under a stronger level.
Parametricity over the isolation specification $\I$, combined with the
ability to strengthen $\I$ as needed, admits a flexible proof strategy
to prove database programs correct. For example, programmers can
declare isolation requirements of their choice through $\I$, and then
prove programs correct assuming the guarantees hold. The soundness of
strengthening $\I$ ensures that a program can be safely executed on
any system that offers isolation guarantees at least as strong as
those assumed.

Salient rules of transaction-local RG judgments are shown in
Fig.~\ref{fig:rg-rules}. These rules (\rulelabel{RG-Update},
\rulelabel{RG-Select}, \rulelabel{RG-Delete}, and
\rulelabel{RG-Insert}) reflect the structure of the corresponding
reduction rule from Fig.~\ref{fig:txnimp}.  The rule
\rulelabel{RG-Foreach} defines the RG judgment for a \C{FOREACH} loop.
As is characteristic of loops, the reasoning is pivoted on a loop
invariant $\psi$ that needs to be stable w.r.t $\R$. $\psi$ must be
implied by $P$, the pre-condition of \C{FOREACH}, when no elements
have been iterated, i.e, when $y=\emptyset$. The body of the loop can
assume the loop invariant, and the fact that $z$ is an element from
the set $x$ being iterated, to prove its post-condition $Q_c$. The
operational semantics ensures that $z$ is added to $y$ at the end of
the iteration, hence $Q_c$ must imply $[y\cup\{z\}/y]\psi$. When the
loop has finished execution, $y$, the set of iterated items, is the
entire set $x$. Thus $[x/y]\psi$ is true at the end of the loop, from
which the post-condition $Q$ must follow. As with the other rules, $Q$
needs to be stable. The rules for conditionals, sequencing etc., are
standard, and hence elided.

\subsection{Semantics and Soundness}

We now formalize the semantics of the RG judgments defined in
Fig.~\ref{fig:rg-rules}, and state their soundness guarantees.

\begin{definition}[\bfseries Interleaved step and multi-step relations]
Interleaved step relations interleave global and transaction-local
reductions with interference as captured by the corresponding rely
relations. They are defined thus:
\begin{smathpar}
\begin{array}{lclr}
(c,\stg) \rstepsto (c',\stg') & \defeq &  
  (c,\stg) \stepsto (c',\stg') \disj (c' = c \conj R(\stg, \stg'))&
  \texttt{global}\\
(\tbox{c}_i,\stl,\stg) \rstepsto (\tbox{c'}_i,\stl',\stg') & \defeq & \stg \vdash 
  (\tbox{c}_i,\stl) \stepsto (\tbox{c'}_i,\stl') \conj \stg'=\stg& \texttt{transaction-local}\\
  &   & \disj (c' = c \conj \stl'=\stl \conj \R(\stl, \stg, \stg'))
\end{array}
\end{smathpar}

\noindent An interleaved multi-step relation ($\stepssto{n}$) is the
reflexive transitive closure of the interleaved step relation.  
\end{definition}

\begin{definition}[\bfseries Semantics of RG judgments]
\label{def:rg-semantics}
The semantics of the global and transaction-local RG judgments are
defined thus:
\begin{smathpar}
\begin{array}{lclr}
\R \vdash \hoare{P}{c}{Q} & \defeq & \forall \stl,\stl',\stg,\stg',
  \bar{v}.~ P(\stl,\stg) \conj (\tbox{c}_i,\stl,\stg) \rstepssto{n}
  (\tbox{\cskip}_i, \stl',\stg')
  \Rightarrow Q(\stl',\stg') & \bar{v} = {\sf freevars}(c)\\
\rg{I,R}{c}{G,I} & \defeq &  \forall \stg.\, I(\stg)
  \Rightarrow (\forall \stg'.\; (c,\stg) 
    \rstepssto{n} (\cskip,\stg') \Rightarrow I(\stg')) \\
&&\hspace*{0.5in}\conj \texttt{step-guaranteed}(R,G,c,\stg)\\
\end{array}
\end{smathpar}

\noindent The
$\texttt{step-guaranteed}$ predicate used in the semantics of the
global RG judgment is defined below:\vspace*{-10pt}

\begin{smathpar}
\begin{array}{lcl}
\texttt{step-guaranteed}(R,G,c,\stg) &\defeq& \forall \stg',c'',\stg''.
(c,\stg) \rstepssto{n} (c',\stg') \conj (c',\stg') \stepsto
  (c'',\stg'') \Rightarrow G(\stg',\stg'')\\
\end{array}
\end{smathpar}
\end{definition}

\noindent We can now assert the soundness of the RG judgments in
Fig.~\ref{fig:rg-rules} as follows\footnote{Its proof is provided in
  the supplementary material.}:

\begin{theorem}[\bfseries Soundness] 
The rely-guarantee judgments defined by the rules in
Fig.~\ref{fig:rg-rules} are sound with respect to the semantics of
Definition~\ref{def:rg-semantics}.
\end{theorem}

\noindent Thus, if $\rg{I,R}{c}{G,I}$ is a valid RG judgment, then (a)
every interleaved multi-step reduction of $c$ preserves the database
integrity constraint (consistency condition) $I$, and (b) the effect
that every transaction in $c$ has on the database state is captured by
$G$.

